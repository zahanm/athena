
DEFINE COMMUNITY karma USING karma_profile {
  goal
  learnables
  teachables
  student
  teacher
  location
  is_current
}

DEFINE interest {
  name
}

DEFINE interests OF interest

DEFINE COMMUNITY admins USING admins_profile {}

# Signup process
# --------------

DEFINE state_goal FOR person DO
  PERFORM "What is your goal?"
  RETURN goal
END

DEFINE state_skill_needed FOR person DO
  PERFORM "What is the skill needed to perform that task?"
  RETURN skill
END

DEFINE state_teachable FOR person DO
  PERFORM "Tell me what you'd be interested in teaching."
  RETURN teachable
END

DEFINE identify_yourself FOR person DO
  PERFORM "Tell me your email address."
  RETURN email
END

DEFINE state_location FOR person DO
  PERFORM "Tell me your current city. (optional)"
  RETURN location
END

DEFINE signup_request {}

LISTEN TO public VIA http FOR signup_requests

ON EACH signup_request DO
  learner = PERSON FROM signup_request
  PRINT learner
  IF learner.karma_profile THEN
    #esponse = ASK learner VIA stream TO know_profile_exists
    #skill = response[0]['skill']
    #ADD skill TO learner.karma_profile.teachables
    #SAVE learner TO karma
    NOTIFY public VIA stream OF learner
  ELSE
  	learner.karma_profile = {}
   	response = ASK learner VIA stream TO state_goal
   	goal = response[0]['goal']
	INSPECT goal
   	learner.karma_profile.goal = goal
   	response = ASK learner VIA stream TO state_skill_needed
   	learner.karma_profile.learnables = {}
   	skill = response[0]['skill']
   	ADD skill TO learner.karma_profile.learnables
	COMPUTE save_skill ON skill
   	response = ASK learner VIA stream TO state_teachable
   	learner.karma_profile.teachables = {}
   	teachable = response[0]['teachable']
   	ADD teachable TO learner.karma_profile.teachables
	COMPUTE save_skill ON teachables
	location = ASK learner VIA stream TO state_location
   	learner.location = location[0]['location']
   	identity = ASK learner VIA stream TO identify_yourself
   	learner.email = identity[0]['email']
   	COMPUTE print_details ON learner
   	SAVE learner TO karma
   	NOTIFY public VIA stream OF learner
  END
END

# Browse
# ------

DEFINE browse_request {}

LISTEN TO public FOR browse_requests

ON EACH browse_request DO
  browser = PERSON FROM browse_request
  karma_users = FIND people.people FROM karma
  INSPECT karma_users
  FOR EACH karma_user IN karma_users DO
    NOTIFY browser VIA stream OF karma_user
  END
END

DEFINE provide_email FOR person DO
  RETURN address
END

DEFINE pair_request { address, suggestion }

LISTEN TO public VIA http FOR pair_requests

ON EACH pair_request DO
  browser = PERSON FROM pair_request
  PRINT 'name: ' + browser.first_name + " " + browser.last_name
  address = pair_request['address']
  PRINT 'email: ' + address
  teachers = FIND people.people FROM karma WHERE email == address
  suggestion = pair_request['suggestion']

  tester = people.person {
     email = address
   }

   message = dog.email {
     subject = browser.first_name + " suggested a new skill for you!"
     body = "Hello, " + teachers[0].first_name + ", \n" + browser.first_name + " " + browser.last_name + " suggested that you add '" + suggestion +"' to your list of skills."
   }

  NOTIFY tester VIA email OF message
END

# Profiles

DEFINE profile_request { profile_id }

LISTEN TO public VIA http FOR profile_requests

ON EACH profile_request DO
  browser = PERSON FROM profile_request
  id = profile_request['profile_id']
  IF id THEN
  	profiles = FIND people.people FROM karma WHERE facebook_profile.id == id
	INSPECT profiles
	profile = profiles[0]
	profile.is_current = browser.facebook_profile.id == id
	NOTIFY browser VIA stream OF profile
  ELSE
	browser.is_current = true;
	NOTIFY browser VIA stream OF browser
  END
END

DEFINE state_additional_teachable FOR person DO
  PERFORM "What is another skill you could teach?"
  RETURN skill
END

DEFINE edit_request { skill }

LISTEN TO public VIA http FOR edit_requests

ON EACH edit_request DO
  browser = PERSON FROM edit_request
  teachable = edit_request['skill']
  #PRINT 'name: ' + browser.first_name + " " + browser.last_name
  #teachable = add_teachable['skill'] 
  INSPECT teachable
  COMPUTE save_skill ON teachable
  ADD teachable TO browser.karma_profile.teachables
  SAVE browser TO people.people
  INSPECT browser.karma_profile.teachables
  INSPECT karma
  #NOTIFY public VIA stream OF browser
  #response = ASK browser VIA stream TO state_additional_teachable
  NOTIFY public VIA stream OF browser
  #skill = response[0]['skill']  
  #INSPECT skill
END
	
DEFINE delete_teachable { skill }

LISTEN TO public VIA http FOR delete_teachables

ON EACH delete_teachable DO
  browser = PERSON FROM delete_teachable
  PRINT 'name: ' + browser.first_name + " " + browser.last_name
  teachables = {}
  skill = delete_teachable['skill']
  FOR EACH teachable IN browser.karma_profile.teachables DO
	PRINT teachable
	IF teachable != skill THEN
		ADD teachable TO teachables
	END
  END
  INSPECT skill
  size = COMPUTE system.size ON teachables
  IF size != 0 THEN
  	browser.karma_profile.teachables = teachables
  	INSPECT browser.karma_profile.teachables
  	SAVE browser TO people.people
  ELSE
	PRINT 'Cannot delete all skills.'
  END
  NOTIFY public VIA stream OF browser
END

# Pairing people
# --------------

# Listen for pairings made by the admins
DEFINE pairing { learner, teacher }

LISTEN TO public VIA http FOR pairings # should be 'admins'

ON EACH pairing DO
  # assuming that learner and teacher are correctly populated
  learner = pairing.learner
  teacher = pairing.teacher
  # check out the multiple uses of the profile
  learner.karma_profile.teachers = teacher
  teacher.karma_profile.students = learner
END

# external functions
# ------------------

DEFINE save_skill ON skill DO
	matches = FIND interests WHERE name == skill
	INSPECT matches
	PRINT "COMPUTE"
	new_skill = false
	IF matches THEN
		size = COMPUTE system.size ON matches
		IF size == 0 THEN
			new_skill = true
		END
	ELSE 
		new_skill = true
	END
	PRINT new_skill
	IF new_skill THEN
		new_interest = {}
		new_interest.name = skill
		#INSPECT skill
		#INSPECT new_interest
		SAVE new_interest TO interests
		INSPECT interests
	END
	skills = FIND interests WHERE name != null
	PRINT "SKILLS"
	INSPECT skills
END

DEFINE rank_k_teachers FOR shell ON me, teachers, k DO
  PERFORM "python ranking.py"
  RETURN teachers_list
END

# helper functions
# ----------------

DEFINE print_details ON member DO
  PRINT 'Member:'
  PRINT 'name: ' + member.first_name + " " + member.last_name
  PRINT 'email: ' + member.email
  PRINT 'goal: ' + member.karma_profile.goal
  PRINT 'learnable: ' + member.karma_profile.learnables[0]
  PRINT 'teachable: ' + member.karma_profile.teachables[0]
END
