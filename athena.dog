
DEFINE COMMUNITY karma USING karma_profile {
  goal
  learnables
  teachables
  students
  teachers
  location
  is_current
}

DEFINE interest {
  name
}

DEFINE interests OF interest

DEFINE COMMUNITY admins USING admins_profile {}

# Signup process
# --------------

DEFINE state_goal FOR person DO
  PERFORM "What is your goal?"
  RETURN goal
END

DEFINE state_skill_needed FOR person DO
  PERFORM "What is the skill needed to perform that task?"
  RETURN skill
END

DEFINE state_teachable FOR person DO
  PERFORM "Tell me what you'd be interested in teaching."
  RETURN teachable
END

DEFINE identify_yourself FOR person DO
  PERFORM "Tell me your email address."
  RETURN email
END

DEFINE state_location FOR person DO
  PERFORM "Tell me your current city. (optional)"
  RETURN location
END

DEFINE signup_request {}

LISTEN TO public VIA http FOR signup_requests

ON EACH signup_request DO
  learner = PERSON FROM signup_request
  PRINT learner
  IF learner.karma_profile THEN
    NOTIFY public VIA stream OF learner
  ELSE
    learner.karma_profile = {}
    response = ASK learner VIA stream TO state_goal
    goal = response[0]['goal']
    learner.karma_profile.goal = goal
    response = ASK learner VIA stream TO state_skill_needed
    learner.karma_profile.learnables = {}
    skill = response[0]['skill']
    ADD skill TO learner.karma_profile.learnables
    COMPUTE save_skill ON skill[0]
    response = ASK learner VIA stream TO state_teachable
    learner.karma_profile.teachables = {}
    teachable = response[0]['teachable']
    ADD teachable TO learner.karma_profile.teachables
    COMPUTE save_skill ON teachable[0]
    location = ASK learner VIA stream TO state_location
    learner.location = location[0]['location']
    identity = ASK learner VIA stream TO identify_yourself
    learner.email = identity[0]['email']
    #COMPUTE print_details ON learner
    SAVE learner TO karma
    NOTIFY public VIA stream OF learner
  END
END

# Browse
# ------

DEFINE browse_request {}

LISTEN TO public FOR browse_requests

ON EACH browse_request DO
  browser = PERSON FROM browse_request
  karma_users = FIND people.people FROM karma
  #INSPECT karma_users
  FOR EACH karma_user IN karma_users DO
    NOTIFY browser VIA stream OF karma_user
  END
END

DEFINE provide_email FOR person DO
  RETURN address
END

DEFINE skill_suggestion { address, suggestion }

LISTEN TO public VIA http FOR skill_suggestions

ON EACH skill_suggestion DO
  browser = PERSON FROM skill_suggestion
  PRINT 'name: ' + browser.first_name + " " + browser.last_name
  address = skill_suggestion['address']
  PRINT 'email: ' + address
  teachers = FIND people.people FROM karma WHERE email == address
  suggestion = skill_suggestion['suggestion']

  tester = people.person {
     email = address
   }

  message = dog.email {
    subject = browser.first_name + " suggested a new skill for you!"
    body = "Hello, " + teachers[0].first_name + ", \n" + browser.first_name + " " + browser.last_name + " suggested that you add '" + suggestion +"' to your list of skills."
  }

  NOTIFY tester VIA email OF message
END

# Profiles
DEFINE profile_request { profile_id }

LISTEN TO public VIA http FOR profile_requests

ON EACH profile_request DO
  browser = PERSON FROM profile_request
  id = profile_request['profile_id']
  IF id THEN
    profiles = FIND people.people FROM karma WHERE facebook_profile.id == id
    profile = profiles[0]
    profile.is_current = browser.facebook_profile.id == id
    NOTIFY browser VIA stream OF profile
  ELSE
    browser.is_current = true
    skills = FIND interests WHERE name != null
    browser.all_skills = skills
    NOTIFY browser VIA stream OF browser
  END
END

DEFINE state_additional_teachable FOR person DO
  PERFORM "What is another skill you could teach?"
  RETURN skill
END

DEFINE edit_request { skill, type }

LISTEN TO public VIA http FOR edit_requests

ON EACH edit_request DO
  browser = PERSON FROM edit_request
  skill = edit_request['skill']
  type = edit_request['type']
  COMPUTE save_skill ON skill
  IF type == 'teachable' THEN
    ADD skill TO browser.karma_profile.teachables
  ELSE
    ADD skill TO browser.karma_profile.learnables
  END
  SAVE browser TO karma
  skills = FIND interests WHERE name != null
  browser.all_skills = skills
  NOTIFY browser VIA stream OF browser
END

DEFINE delete_request { skill, type }

LISTEN TO public VIA http FOR delete_requests

ON EACH delete_request DO
  browser = PERSON FROM delete_request
  skills = {}
  del_skill = delete_request['skill']
  type = delete_request['type']
  FOR EACH skill IN browser.karma_profile.teachables DO
    IF skill != del_skill THEN
      ADD skill TO skills
    END
  END
  size = COMPUTE system.size ON skills
  IF size != 0 THEN
    IF type == 'teachable' THEN
      browser.karma_profile.teachables = skills
    ELSE
      browser.karma_profile.learnables = skills
    END
    SAVE browser TO people.people
  ELSE
    PRINT 'Cannot delete all skills.'
  END
  NOTIFY public VIA stream OF browser
END

# Pairing people
# --------------

# Listen for pairings made by the admins
DEFINE pairing { learner, teacher }

LISTEN TO public VIA http FOR pairings # should be 'admins'

ON EACH pairing DO
  # assuming that learner and teacher are correctly populated
  learner = pairing.learner
  teacher = pairing.teacher
  # check out the multiple uses of the profile
  ADD teacher TO learner.karma_profile.teachers
  ADD learner TO teacher.karma_profile.students
  # Email parties
END

# Listen for pair requests from users
DEFINE pair_request { learner, teacher }

LISTEN TO public VIA http FOR pair_requests

ON EACH pair_request DO
  PRINT "PAIR REQUEST"
  browser = PERSON FROM pair_request
  learner_id = pair_request['learner']
  teacher_id = pair_request['teacher']
  INSPECT teacher_id
  INSPECT learner_id
  # send emails to appropriate parties
  IF teacher_id == null THEN # offer to teach
    learners = FIND people.people FROM karma WHERE facebook_profile.id == learner_id
    learner = learners[0]
    INSPECT learner
    message = dog.email {
      subject = browser.first_name + " would like to teach you!"
      body = "Hello, " + learner.first_name + ", \n" + browser.first_name + " " + browser.last_name + " would like to help you reach one of your goals."
    }
    NOTIFY learner VIA email OF message
  ELSE IF learner_id == null THEN # teaching requests
    teachers = FIND people.people FROM karma WHERE facebook_profile.id == teacher_id
    teacher = teachers[0]
    INSPECT teacher
    message = dog.email {
      subject = browser.first_name + " wants to learn from you!"
      body = "Hello, " + teacher.first_name + ", \n" + browser.first_name + " " + browser.last_name + " would like to learn from you."
    }
    NOTIFY teacher VIA email OF message
  ELSE # third-party
    teachers = FIND people.people FROM karma WHERE facebook_profile.id == teacher_id
    teacher = teachers[0]
    learners = FIND people.people FROM karma WHERE facebook_profile.id == learner_id
    learner = learners[0]
    # email teacher
    message = dog.email {
      subject = browser.first_name + " suggested a student for you!"
      body = "Hello, " + teacher.first_name + ", \n" + browser.first_name + " " + browser.last_name + " suggests you teach " + learner.first_name + " " + learner.last_name
    }
    NOTIFY teacher VIA email OF message
    # emails student
    message = dog.email {
      subject = browser.first_name + " suggested a teacher for you!"
      body = "Hello, " + learner.first_name + ", \n" + browser.first_name + " " + browser.last_name + " suggests you learn from " + teacher.first_name + " " + teacher.last_name
    }
    NOTIFY learner VIA email OF message
  END
  # Above:
  # 1) store in queue of potential pairings
  # 2) send link that flip cooresponding bit in potential pairing
END

# external functions
# ------------------

DEFINE save_skill ON skill DO
	new_skill = false
	matches = FIND interests WHERE name == skill
	INSPECT matches
	IF matches THEN
		size = COMPUTE system.size ON matches
		IF size == 0 THEN
			new_skill = true
		END
  ELSE
		new_skill = true
	END
	IF new_skill THEN
		new_interest = {}
		new_interest.name = skill
		SAVE new_interest TO interests
	END
	skills = FIND interests WHERE name != null
END

DEFINE rank_k_teachers FOR shell ON me, teachers, k DO
  PERFORM "python ranking.py"
  RETURN teachers_list
END

# helper functions
# ----------------

DEFINE print_details ON member DO
  PRINT 'Member:'
  PRINT 'name: ' + member.first_name + " " + member.last_name
  PRINT 'email: ' + member.email
  PRINT 'goal: ' + member.karma_profile.goal
  PRINT 'learnable: ' + member.karma_profile.learnables[0]
  PRINT 'teachable: ' + member.karma_profile.teachables[0]
END
