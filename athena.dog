
# DEFINE COMMUNITY athena {
#   learnables
# }

DEFINE learning_request {
  name
  email
  learnable
  teachable
}

DEFINE learning_requests OF learning_request

# Signup process
# --------------

DEFINE state_teachable FOR person DO
  PERFORM "Tell me what you'd be interested in teaching."
  RETURN teachable
END

DEFINE identify_yourself FOR person DO
  PERFORM "Tell me your name and contact info."
  RETURN name, email
END

LISTEN TO public VIA http FOR learning_requests

ON EACH learning_request DO
  COMPUTE add ON learning_requests, learning_request
  INSPECT learning_request
  # learner = PERSON FROM learning_request
  learner = learning_request
  # learner.teachable = ASK learner VIA stream TO state_teachable
  # identity = ASK learner VIA stream TO identify_yourself
  # learner.name = identity.name
  # learner.email = identity.email
  INSPECT learner
  # Task #1 - Save person
  # learner = COMPUTE people.insert ON learner
  # Task #2 - Add to community
  # learner = COMPUTE community.insert ON athena, learner
  NOTIFY public VIA stream OF learner
END

# admin panel
# -----------

DEFINE review_admin_panel FOR person ON learners DO
  PERFORM "Take a look at these learners"
  RETURN name
END

DEFINE admin_panel { }

LISTEN TO public VIA http FOR admin_panels

ON EACH admin_panel DO
  ASK public VIA stream TO review_admin_panel ON learning_requests
  RETURN
END

LISTEN FOR admin_pairing

# best teacher request
# --------------------

DEFINE best_teacher_request {}

LISTEN TO athena VIA http FOR best_teachers_requests

ON EACH best_teachers_request DO
  me = PERSON FROM best_teachers_request
  potential_teachers = PEOPLE FROM athena WHERE teachables == me.learnables
  best_teachers = COMPUTE rank_k_teachers ON potential_teachers USING k = 5
  RETURN best_teachers
END

DEFINE rank_k_teachers FOR shell ON me, teachers USING k = 5 DO
  PERFORM "python ranking.py"
  RETURN teachers_list
END
