
DEFINE COMMUNITY athena { # change name to learners
  learnables
  learner
  teachables
  teacher
}

DEFINE COMMUNITY admins { }

# Signup process
# --------------
#
# Pretty straightforward. Almost working in v0.1
#

DEFINE state_teachables FOR person DO
  PERFORM "Tell me what you'd be interested in teaching."
  RETURN teachables
END

DEFINE identify_yourself FOR person DO
  PERFORM "Tell me your name and contact info."
  RETURN name, email
END

# TODO DEFINE, LISTEN and ON EACH is verbose - shorten?
# DECISION pending structure returned by 'LISTEN FOR <type>'
# DECISION listen for structure - that structure can be
# defined inline in the LISTEN
learning_requests = LISTEN TO public VIA http FOR { topic }

ON EACH learning_request DO
  learner = PERSON FROM learning_request
  # add learner to athena community
  # TODO do we need to have the 'learner ='?
  # DECISION macros which define syntactic sugar
  # So: ADD salman TO box ==> box = COMPUTE add ON salman, box
  # TODO should the add to community be at the top
  #   since required attributes only get added on from the community
  # DECISION add community at the beginning
  ADD learner TO athena
  # add learnables to person for persistant storage
  ADD learning_request.topic TO learner.athena.learnables
  teachables = ASK learner VIA stream TO state_teachables
  # add teachables to person
  learner.teachables = ADD teachables TO learner.teachables
  identity = ASK learner VIA stream TO identify_yourself
  # TODO think about auto-adding properties to learner in both LISTEN and ASK
  # DECISION: macros can handle this => MERGE identity INTO learner
  learner.name = identity.name
  learner.email = identity.email
  # TODO required
  # Save modifications made to person
  SAVE learner
  # For eventual debugging purposes
  INSPECT learner
  # TODO iffy, learner will not update if admin display stems from this
  NOTIFY admins OF learner
END

# admin panel
# -----------
#
# Human moderated pairings
#

# Add the predefined admins to the community
# TODO syntax to define a person, using known details
# DECISION apart from macro for ADD, this should work as is
ADD dog.person { first_name = "Zahan", last_name = "Malkani", email = "zahanm@mit.edu" } TO admins
ADD dog.person { first_name = "Sep", last_name = "Kamvar", email = "sdkamvar@mit.edu" } TO admins
ADD dog.person { first_name = "Salman", last_name = "Ahmad", email = "saahmad@mit.edu" } TO admins

# Using a LISTEN, since we want up to date information about the pairs
# when making the request, so the data needs to be fetched at request time

# TODO listening for nothing?
# DECISION `request` aliased to { }
unpaired_listings = LISTEN TO admins VIA http FOR request

ON EACH unpaired_listing DO
  # TODO query syntax, shared with all collections?
  unpaired = PEOPLE FROM athena WHERE learner == NULL OR teacher == NULL
  RETURN unpaired
END

unpaired = PEOPLE FROM athena AND mit WHERE learner == NULL OR teacher == NULL
results = videos WHERE
results = FROM videos WHERE ...

results = QUERY videos WHERE
results = FIND videos WHERE
results = DATA FROM videos WHERE



results - videos[ ... ]

# Listen for pairings made by the admins
DEFINE pairing { learner, teacher }

LISTEN TO admins VIA http FOR pairings

ON EACH pairing DO
  # TODO PERSON shortcut for PEOPLE .. LIMIT 1 ?
  # TODO how to map submitted person to Person type?
  learner = PERSON FROM athena WHERE ref = pairing.learner
  teacher = PERSON FORM athena WHERE ref = pairing.teacher
  # TODO what does this store, refs?
  learner.teacher = teacher
  teacher.learner = learner
END

# external ranking
# ----------------
#
# Automated pairing, driven by external Python functions
#

# This function is just to choose the best teacher
# TODO assuming that we're optimizing for the best teachers and
#   not learners
DEFINE best_unpaired_teacher ON learner DO
  # TODO intersection syntax?
  potential_teachers = PEOPLE FROM athena WHERE learner == NULL AND (teachables & learner.learnables) > 0
  best_teachers = COMPUTE rank_k_teachers ON learner, potential_teachers
  # TODO slice syntax?
  RETURN best_teachers[0]
END

DEFINE rank_k_teachers FOR shell ON me, teachers USING k = 5 DO
  PERFORM "python ranking.py"
  RETURN teachers_list
END

# --- App-wide notes

# TODO start using Titlecase for structure names?
# TODO should teacher-learner be many-to-many?
